Warps:
	-> Why using warps from a SIMD(Single Instruction, Multiple Data) viewpoint?
	-> Dangers of Warps

Hierarchy of Threads:
	-> Top-level: 1/2/3 dimensional blocks.
	-> Bottom-level: 1/2/3 dimensional array of threads within each block.
Resources are given per block but the scheduling of threads are by warp.

	In a block, threads can execute at any order. If there are phases in the program, barrier sychronizations can be used to ensure necessary syncs.
	Correctness of a kernel execution doesn't depend on thread syncing.

* Info about Warps:
	-> When a block is assigned to a SM, the threads are divided into warps.
	-> Warps consist of 32 threads with consecutive thread ID's.
	-> Order of warp execution isn't clear in SMs, just the fact that threads within a warp are in sync & execute the same computation.
	-> Warps enable memory coalescing.

* How are blocks partitioned via warps?
Via thread indices. Thread IDs within a warp is consecutive & increasing.
The thread notation: T(x,y,z) but y is horizontal while x is vertical
Ex:(1D)
	->For a warp size of 32
	warp 0 = thread 0 ~ thread 31
	warp 1 = thread 32 ~ thread 63
	warp n = thread 32 * n ~ thread 32 * (n+1) - 1
If the size of a thread block isn't a multiple of 32, the missing threads will be added automatically to the last warp.

Ex:(2D)
	->Dimensions will be projected into a linear order first then they'll be seperated into warps.
	
	T(0,0) T(0,1) T(0,2) T(0,3)
    
	T(1,0) T(1,1) T(1,2) T(1,3)
	
	T(2,0) T(2,1) T(2,2) T(2,3)
	
	T(2,0) T(2,1) T(2,2) T(2,3)

	This 2D thread array will be seperated into warps after being organized like this:

	T(0,0) T(0,1) T(0,2) T(0,3) T(1,0) T(1,1) T(1,2) T(1,3) T(2,0) T(2,1) T(2,2) T(2,3) T(3,0) T(3,1) T(3,2) T(3,3)

Thread ID calculations: threadIdx.x + threadIdx.y * blockDim.x + threadId.z * blockDim.x * blockDim.y
Then the warps are divided consecutively by mod 32.

Warps are good when each of the 32 threads have the same flow(in an if-else statement, they all chose if)
They are bad when there is a thread divergence: 
	-> For instance, in an if-else statement some choses the if and some choses the else part(2 passes: 1 for if and 1 for else)

! A loop or if-else statement based on threadId's are dangerous as they might cause thread divergence.






















